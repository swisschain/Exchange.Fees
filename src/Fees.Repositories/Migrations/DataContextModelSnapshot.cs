// <auto-generated />
using System;
using Fees.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Fees.Repositories.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("fees")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Fees.Repositories.Entities.CashOperationsFeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("CashInFeeType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<decimal>("CashInValue")
                        .HasColumnType("numeric");

                    b.Property<string>("CashOutFeeType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<decimal>("CashOutValue")
                        .HasColumnType("numeric");

                    b.Property<string>("CashTransferFeeType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<decimal>("CashTransferValue")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Asset");

                    b.HasIndex("BrokerId", "Asset")
                        .IsUnique();

                    b.ToTable("cash_operations_fee");
                });

            modelBuilder.Entity("Fees.Repositories.Entities.CashOperationsFeeHistoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("CashInFeeType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<decimal>("CashInValue")
                        .HasColumnType("numeric");

                    b.Property<long>("CashOperationsFeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CashOutFeeType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<decimal>("CashOutValue")
                        .HasColumnType("numeric");

                    b.Property<string>("CashTransferFeeType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<decimal>("CashTransferValue")
                        .HasColumnType("numeric");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.ToTable("cash_operations_fee_history");
                });

            modelBuilder.Entity("Fees.Repositories.Entities.SettingsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FeeAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("FeeWalletId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId")
                        .IsUnique();

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Fees.Repositories.Entities.TradingFeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Asset")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("AssetPair")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("BrokerId", "AssetPair")
                        .IsUnique();

                    b.ToTable("trading_fee");
                });

            modelBuilder.Entity("Fees.Repositories.Entities.TradingFeeLevelEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MakerFee")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TakerFee")
                        .HasColumnType("numeric");

                    b.Property<long>("TradingFeeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("TradingFeeId");

                    b.HasIndex("Volume")
                        .IsUnique();

                    b.ToTable("trading_fee_level");
                });

            modelBuilder.Entity("Fees.Repositories.Entities.TradingFeeLevelEntity", b =>
                {
                    b.HasOne("Fees.Repositories.Entities.TradingFeeEntity", null)
                        .WithMany("Levels")
                        .HasForeignKey("TradingFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
